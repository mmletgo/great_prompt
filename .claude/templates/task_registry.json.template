# task_registry.json Template

## Overview
`task_registry.json` is the central task management file that contains all frontend and backend tasks, their relationships, dependencies, and execution order. It's generated during the decomposition phase and updated during development.

## File Location
```
.claude_tasks/task_registry.json
```

## Structure Overview

**NEW: Tree Structure (Hierarchical)**
- Tasks are organized in a tree hierarchy
- Root tasks (modules) are at top level in `frontend_tasks` and `backend_tasks` arrays
- Child tasks (pages/services) are nested in parent's `subtasks` array
- Leaf tasks (components/functions) are nested in their parent's `subtasks` array
- Each task has unique ID within its category (e.g., "1", "1.1", "1.2.3")

## Complete Structure
```json
{
  "frontend_tasks": [
    {
      "id": "1",
      "title": "Authentication Module",
      "level": 1,
      "type": "module",
      "category": "frontend",
      "status": "decomposed",
      "dependencies": [],
      "subtasks": [
        {
          "id": "1.1",
          "title": "Login Page",
          "level": 2,
          "type": "page",
          "category": "frontend",
          "status": "decomposed",
          "parent_id": "1",
          "dependencies": [],
          "design_reference": "designs/wireframes/login-page.md",
          "subtasks": [
            {
              "id": "1.1.1",
              "title": "LoginForm",
              "level": 3,
              "type": "component",
              "category": "frontend",
              "status": "completed",
              "parent_id": "1.1",
              "dependencies": [],
              "context_file": ".claude_tasks/contexts/frontend_1_1_1_context.md",
              "component_type": "form",
              "props": ["onSubmit", "error"],
              "state": ["email", "password", "isLoading"],
              "design_reference": "designs/wireframes/login-page.md",
              "implementation_file": "src/components/auth/LoginForm.tsx",
              "test_file": "src/components/auth/__tests__/LoginForm.test.tsx",
              "completed_at": "2025-10-08T11:30:00Z",
              "duration_minutes": 8.5,
              "test_coverage": 95,
              "subtasks": []
            },
            {
              "id": "1.1.2",
              "title": "LoginButton",
              "level": 3,
              "type": "component",
              "category": "frontend",
              "status": "completed",
              "parent_id": "1.1",
              "dependencies": [],
              "context_file": ".claude_tasks/contexts/frontend_1_1_2_context.md",
              "component_type": "button",
              "props": ["onClick", "disabled", "loading"],
              "state": ["isLoading"],
              "design_reference": "designs/wireframes/login-page.md",
              "implementation_file": "src/components/auth/LoginButton.tsx",
              "test_file": "src/components/auth/__tests__/LoginButton.test.tsx",
              "completed_at": "2025-10-08T11:45:00Z",
              "duration_minutes": 2.3,
              "test_coverage": 92,
              "subtasks": []
            }
          ]
        },
        {
          "id": "1.2",
          "title": "Register Page",
          "level": 2,
          "type": "page",
          "category": "frontend",
          "status": "pending",
          "parent_id": "1",
          "dependencies": [],
          "design_reference": "designs/wireframes/register-page.md",
          "subtasks": []
        }
      ]
    },
    {
      "id": "2",
      "title": "Dashboard Module",
      "level": 1,
      "type": "module",
      "category": "frontend",
      "status": "pending",
      "dependencies": ["1"],
      "subtasks": []
    }
  ],
  "backend_tasks": [
    {
      "id": "1",
      "title": "Authentication Service",
      "level": 1,
      "type": "module",
      "category": "backend",
      "status": "decomposed",
      "dependencies": [],
      "api_endpoints": ["POST /api/auth/login", "POST /api/auth/register"],
      "database_tables": ["users", "sessions"],
      "subtasks": [
        {
          "id": "1.1",
          "title": "AuthService",
          "level": 2,
          "type": "service",
          "category": "backend",
          "status": "decomposed",
          "parent_id": "1",
          "dependencies": [],
          "subtasks": [
            {
              "id": "1.1.1",
              "title": "login_user",
              "level": 3,
              "type": "function",
              "category": "backend",
              "status": "completed",
              "parent_id": "1.1",
              "dependencies": ["1.1.2", "1.1.3"],
              "context_file": ".claude_tasks/contexts/backend_1_1_1_context.md",
              "function_type": "endpoint",
              "layer": "api",
              "http_method": "POST",
              "route": "/api/auth/login",
              "request_body": {"email": "string", "password": "string"},
              "response_body": {"token": "string", "user": "object"},
              "implementation_file": "src/api/auth.py",
              "test_file": "tests/test_auth.py",
              "completed_at": "2025-10-08T10:25:00Z",
              "duration_minutes": 12.1,
              "test_coverage": 88,
              "subtasks": []
            },
            {
              "id": "1.1.2",
              "title": "validate_credentials",
              "level": 3,
              "type": "function",
              "category": "backend",
              "status": "completed",
              "parent_id": "1.1",
              "dependencies": [],
              "context_file": ".claude_tasks/contexts/backend_1_1_2_context.md",
              "function_type": "validator",
              "layer": "validation",
              "implementation_file": "src/validators/auth.py",
              "test_file": "tests/test_validators.py",
              "completed_at": "2025-10-08T10:10:00Z",
              "duration_minutes": 5.5,
              "test_coverage": 100,
              "subtasks": []
            },
            {
              "id": "1.1.3",
              "title": "generate_token",
              "level": 3,
              "type": "function",
              "category": "backend",
              "status": "completed",
              "parent_id": "1.1",
              "dependencies": [],
              "context_file": ".claude_tasks/contexts/backend_1_1_3_context.md",
              "function_type": "util",
              "layer": "utility",
              "implementation_file": "src/utils/jwt.py",
              "test_file": "tests/test_jwt.py",
              "completed_at": "2025-10-08T09:55:00Z",
              "duration_minutes": 8.0,
              "test_coverage": 95,
              "subtasks": []
            }
          ]
        }
      ]
    },
    {
      "id": "2",
      "title": "User Management Service",
      "level": 1,
      "type": "module",
      "category": "backend",
      "status": "pending",
      "dependencies": ["1"],
      "subtasks": []
    }
  ],
  "frontend_metadata": {
    "framework": "React",
    "language": "TypeScript",
    "total_modules": 2,
    "total_pages": 4,
    "total_components": 15
  },
  "backend_metadata": {
    "framework": "FastAPI",
    "language": "Python",
    "database": "PostgreSQL",
    "total_modules": 2,
    "total_services": 3,
    "total_functions": 12,
    "layers": {
      "api": 4,
      "service": 3,
      "repository": 3,
      "validation": 1,
      "utility": 1
    }
  },
  "dependency_graph": {
    "frontend_dependencies": {
      "1.3.1": ["1.1.1", "1.1.2"]
    },
    "backend_dependencies": {
      "1.1.1": ["1.1.2", "1.1.3"]
    },
    "cross_stack_dependencies": {
      "1.1.1": ["1.1.1"]
    },
    "execution_order": [
      {
        "wave": 1,
        "category": "backend_foundation",
        "description": "Backend utilities and validation",
        "tasks": ["1.1.2", "1.1.3", "2.1.1"]
      },
      {
        "wave": 2,
        "category": "backend_api",
        "description": "Backend API endpoints",
        "tasks": ["1.1.1", "1.2.1"]
      },
      {
        "wave": 3,
        "category": "frontend_foundation",
        "description": "Shared frontend components",
        "tasks": ["1.1.1", "1.1.2", "3.1.1"]
      },
      {
        "wave": 4,
        "category": "frontend_api_integration",
        "description": "Frontend components with API calls",
        "tasks": ["1.3.1", "2.1.1"]
      }
    ]
  }
}
```

## Key Changes from Flat Structure

### Tree Structure Benefits
1. **Natural Hierarchy**: Parent-child relationships are explicit through nesting
2. **Easy Navigation**: Traverse tree to find all subtasks
3. **Clear Ownership**: Each subtask is contained within its parent
4. **Simplified IDs**: Use dot notation (1, 1.1, 1.1.1) instead of sequential numbers

### ID Format
- **Module (Level 1)**: `"1"`, `"2"`, `"3"`
- **Page/Service (Level 2)**: `"1.1"`, `"1.2"`, `"2.1"`
- **Component/Function (Level 3)**: `"1.1.1"`, `"1.1.2"`, `"2.1.3"`

### Dependency References
- Dependencies still use IDs but with dot notation
- Example: `"1.1.1"` depends on `["1.1.2", "1.1.3"]`
- Cross-tree dependencies work the same way

## Field Descriptions

### Task Object (Common Fields)
| Field | Type | Required | Description |
|-------|------|----------|-------------|
| `id` | string | ✓ | Dot-notation ID (`"1"`, `"1.1"`, `"1.1.1"`) |
| `title` | string | ✓ | Human-readable task name |
| `level` | number | ✓ | Hierarchy level (1=Module, 2=Page/Service, 3=Component/Function) |
| `type` | string | ✓ | Task type (see Task Types below) |
| `category` | string | ✓ | `frontend` or `backend` |
| `status` | string | ✓ | Current status (see Status Values below) |
| `parent_id` | string | - | Parent task ID (only for Level 2-3) |
| `subtasks` | array | ✓ | Array of child task objects (nested) |
| `dependencies` | array | ✓ | Task IDs this task depends on (dot notation) |
| `context_file` | string | - | Path to task context markdown file (Level 3 only) |
| `implementation_file` | string | - | Path to implementation file (Level 3 only) |
| `test_file` | string | - | Path to test file (Level 3 only) |
| `completed_at` | string | - | ISO 8601 timestamp (when completed) |
| `duration_minutes` | number | - | Execution time (when completed) |
| `test_coverage` | number | - | Test coverage percentage (when completed) |

### Frontend Task Fields
| Field | Type | Description |
|-------|------|-------------|
| `component_type` | string | Component category (e.g., "button", "form", "page") |
| `props` | array | Component prop names |
| `state` | array | Component state variable names |
| `design_reference` | string | Path to wireframe/design file |

### Backend Task Fields
| Field | Type | Description |
|-------|------|-------------|
| `function_type` | string | `endpoint`, `service`, `repository`, `validator`, `util` |
| `layer` | string | Architecture layer (api/service/repository/validation/utility) |
| `http_method` | string | HTTP method (for endpoint type) |
| `route` | string | API route (for endpoint type) |
| `request_body` | object | Request schema (for endpoint type) |
| `response_body` | object | Response schema (for endpoint type) |

## Task Types

### Frontend
- **module**: Level 1 - UI module grouping
- **page**: Level 2 - Individual page
- **component**: Level 3 - React/Vue component

### Backend
- **module**: Level 1 - Service module grouping
- **service**: Level 2 - Business logic service class
- **function**: Level 3 - Individual function

## Status Values

| Status | Description | When to Use |
|--------|-------------|-------------|
| `pending` | Not yet decomposed | Initial state for Level 1-2 tasks |
| `decomposed` | Broken down into subtasks | After decomposition, before development |
| `ready` | Ready for development | Level 3 task ready to implement |
| `in_progress` | Currently being developed | During TDD implementation |
| `completed` | Development finished | All tests pass |
| `failed` | Development failed | Tests failed or error occurred |

## Function Types (Backend)

| Type | Layer | Description | Example |
|------|-------|-------------|---------|
| `endpoint` | API | HTTP route handler | `POST /api/auth/login` |
| `service` | Service | Business logic | `validateCredentials()` |
| `repository` | Repository | Database access | `findUserByEmail()` |
| `validator` | Validation | Input validation | `validateEmailFormat()` |
| `util` | Utility | Helper functions | `generateToken()` |

## Dependency Graph

### frontend_dependencies
```json
{
  "child_task_id": ["dependency_task_id_1", "dependency_task_id_2"]
}
```
Child task can only start after all dependency tasks complete.

### backend_dependencies
Same structure as frontend_dependencies, for backend-only relationships.

### cross_stack_dependencies
```json
{
  "frontend_task_id": ["backend_task_id"]
}
```
Frontend task depends on backend task (e.g., frontend component needs backend API).

### execution_order
Array of waves defining serial execution order:
```json
{
  "wave": 1,
  "category": "backend_foundation",
  "description": "Wave description",
  "tasks": ["backend_task_002", "backend_task_003"]
}
```

**Wave Categories**:
- `backend_foundation`: Utilities, validators
- `backend_repository`: Data access layer
- `backend_service`: Business logic
- `backend_api`: API endpoints
- `frontend_foundation`: Shared components
- `frontend_pages`: Page components
- `frontend_api_integration`: Components with API calls
- `integration_tests`: E2E tests

## Usage Examples

### Add New Frontend Component Task (Nested)
```json
{
  "frontend_tasks": [
    {
      "id": "1",
      "title": "User Profile Module",
      "level": 1,
      "type": "module",
      "category": "frontend",
      "status": "decomposed",
      "dependencies": [],
      "subtasks": [
        {
          "id": "1.1",
          "title": "Profile Page",
          "level": 2,
          "type": "page",
          "category": "frontend",
          "status": "decomposed",
          "parent_id": "1",
          "dependencies": [],
          "design_reference": "designs/wireframes/profile-page.md",
          "subtasks": [
            {
              "id": "1.1.1",
              "title": "UserProfileCard",
              "level": 3,
              "type": "component",
              "category": "frontend",
              "status": "ready",
              "parent_id": "1.1",
              "dependencies": [],
              "context_file": ".claude_tasks/contexts/frontend_1_1_1_context.md",
              "component_type": "card",
              "props": ["userId", "onEdit"],
              "design_reference": "designs/wireframes/profile-page.md",
              "subtasks": []
            }
          ]
        }
      ]
    }
  ]
}
```

### Add New Backend Function Task (Nested)
```json
{
  "backend_tasks": [
    {
      "id": "1",
      "title": "User Service",
      "level": 1,
      "type": "module",
      "category": "backend",
      "status": "decomposed",
      "dependencies": [],
      "subtasks": [
        {
          "id": "1.1",
          "title": "UserService",
          "level": 2,
          "type": "service",
          "category": "backend",
          "status": "decomposed",
          "parent_id": "1",
          "dependencies": [],
          "subtasks": [
            {
              "id": "1.1.1",
              "title": "getUserProfile",
              "level": 3,
              "type": "function",
              "category": "backend",
              "status": "ready",
              "parent_id": "1.1",
              "dependencies": ["2.1.1"],
              "context_file": ".claude_tasks/contexts/backend_1_1_1_context.md",
              "function_type": "service",
              "layer": "service",
              "subtasks": []
            }
          ]
        }
      ]
    }
  ]
}
```

### Update Task Status After Completion (In-Tree)
Find task by traversing tree and update in place:
```json
{
  "id": "1.1.1",
  "status": "completed",
  "implementation_file": "src/api/user.py",
  "test_file": "tests/test_user.py",
  "completed_at": "2025-10-08T10:25:00Z",
  "duration_minutes": 8.5,
  "test_coverage": 92
}
```

## Tree Navigation Examples

### Find Task by ID
```python
def find_task(tasks, task_id):
    """Find task in tree by ID."""
    for task in tasks:
        if task["id"] == task_id:
            return task
        if task["subtasks"]:
            found = find_task(task["subtasks"], task_id)
            if found:
                return found
    return None

# Usage
task = find_task(registry["frontend_tasks"], "1.1.2")
```

### Get All Leaf Tasks (Level 3)
```python
def get_leaf_tasks(tasks, leaves=[]):
    """Get all leaf tasks (components/functions)."""
    for task in tasks:
        if task["level"] == 3:
            leaves.append(task)
        if task["subtasks"]:
            get_leaf_tasks(task["subtasks"], leaves)
    return leaves

# Usage
components = get_leaf_tasks(registry["frontend_tasks"])
functions = get_leaf_tasks(registry["backend_tasks"])
```

### Get Task Path (Breadcrumb)
```python
def get_task_path(tasks, task_id, path=[]):
    """Get full path to task (e.g., ['1', '1.1', '1.1.2'])."""
    for task in tasks:
        if task["id"] == task_id:
            return path + [task["id"]]
        if task["subtasks"]:
            result = get_task_path(task["subtasks"], task_id, path + [task["id"]])
            if result:
                return result
    return None

# Usage
path = get_task_path(registry["frontend_tasks"], "1.1.2")
# Returns: ['1', '1.1', '1.1.2']
```

## Best Practices

1. **Tree Structure ID Naming**: Use dot notation `{module}.{page/service}.{component/function}`
   - Module: `"1"`, `"2"`, `"3"`
   - Page/Service: `"1.1"`, `"1.2"`, `"2.1"`
   - Component/Function: `"1.1.1"`, `"1.1.2"`, `"2.1.3"`

2. **Preserve Tree Hierarchy**: Level 1 (root) → Level 2 (nested) → Level 3 (nested)
   
3. **Always Initialize subtasks**: Set `"subtasks": []` for all tasks (even leaves)

4. **Dependencies Use IDs**: Reference tasks by ID (`"1.1.2"`) not by position in tree

5. **Update In-Place**: Update task fields directly in tree structure

6. **Parent ID for Context**: Level 2-3 tasks have `parent_id` for breadcrumb

7. **Context Files for Leaves Only**: Only Level 3 tasks need `context_file`

8. **Atomic Updates**: Update related fields together (status + completed_at + files)

9. **Tree Traversal**: Use recursive functions to find/update tasks in tree

10. **Flat Execution Order**: `execution_order` still uses flat list of task IDs

## Integration with state.json

- Task statuses should sync with `state.json.development_phase.completed_tasks` array
- Failed tasks should appear in `state.json.development_phase.failed_tasks` array
- Wave execution order drives `state.json.development_phase.wave_progress`
- Total task counts should match metadata totals

## Generation Process

1. **Design Phase** → wireframes generated
2. **Frontend Decomposition** → frontend tasks created
3. **Backend Decomposition** → backend tasks created
4. **Dependency Analysis** → dependency_graph.execution_order generated
5. **Development Phase** → task statuses updated

## See Also
- [state.json Template](.claude/templates/state.json.template)
- [Task Context Template](.claude/templates/context-template.md)
- [CLAUDE.md - Task Type Hierarchy](../CLAUDE.md#task-type-hierarchy)
